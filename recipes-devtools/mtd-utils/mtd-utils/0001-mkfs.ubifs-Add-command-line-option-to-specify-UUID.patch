From 07a2acb4534ff219b6b143480d34ddaf13e18410 Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Sat, 23 Feb 2019 04:58:16 +0300
Subject: [PATCH] mkfs.ubifs: Add command line option to specify UUID

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 ubifs-utils/mkfs.ubifs/mkfs.ubifs.c | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
index 6323dd4..c693ec5 100644
--- a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
+++ b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
@@ -116,6 +116,8 @@ static int out_fd;
 static int out_ubi;
 static int squash_owner;
 static int do_create_inum_attr;
+static uuid_t uuid;
+static int uuid_specified;
 
 /* The 'head' (position) which nodes are written */
 static int head_lnum;
@@ -138,7 +140,7 @@ static struct inum_mapping **hash_table;
 /* Inode creation sequence number */
 static unsigned long long creat_sqnum;
 
-static const char *optstring = "d:r:m:o:D:yh?vVe:c:g:f:Fp:k:x:X:j:R:l:j:UQqa";
+static const char *optstring = "d:r:m:o:D:yh?vVe:c:g:f:Fp:k:x:X:j:R:l:j:UQqau:";
 
 static const struct option longopts[] = {
 	{"root",               1, NULL, 'r'},
@@ -163,6 +165,7 @@ static const struct option longopts[] = {
 	{"orph-lebs",          1, NULL, 'p'},
 	{"squash-uids" ,       0, NULL, 'U'},
 	{"set-inode-attr",     0, NULL, 'a'},
+	{"uuid",               1, NULL, 'u'},
 	{NULL, 0, NULL, 0}
 };
 
@@ -206,6 +209,8 @@ static const char *helptext =
 "-a, --set-inum-attr      create user.image-inode-number extended attribute on files\n"
 "                         added to the image. The attribute will contain the inode\n"
 "                         number the file has in the generated image.\n"
+"-u, --uuid=UUID          Use specified UUID for the volume instead of random\n"
+"                         generated\n"
 "-h, --help               display this help text\n\n"
 "Note, SIZE is specified in bytes, but it may also be specified in Kilobytes,\n"
 "Megabytes, and Gigabytes if a KiB, MiB, or GiB suffix is used.\n\n"
@@ -638,6 +643,10 @@ static int get_options(int argc, char**argv)
 		case 'a':
 			do_create_inum_attr = 1;
 			break;
+		case 'u':
+			if (!uuid_parse(optarg, uuid))
+				uuid_specified = 1;
+			break;
 
 		}
 	}
@@ -2158,7 +2167,11 @@ static int write_super(void)
 	sup.default_compr = cpu_to_le16(c->default_compr);
 	sup.rp_size       = cpu_to_le64(c->rp_size);
 	sup.time_gran     = cpu_to_le32(DEFAULT_TIME_GRAN);
-	uuid_generate_random(sup.uuid);
+	if (uuid_specified) {
+		uuid_copy(sup.uuid, uuid);
+	} else {
+		uuid_generate_random(sup.uuid);
+	}
 	if (verbose) {
 		char s[40];
 
-- 
2.7.4

