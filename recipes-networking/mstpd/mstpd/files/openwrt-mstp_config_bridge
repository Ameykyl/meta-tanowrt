#!/bin/sh
#
# This script uses `ifquery` to read the config in
# /etc/network/interfaces and then runs the mstpctl-utils
# `ifupdown.sh` script to configure the specified bridge in mstpd.
#
# This is used by the `/sbin/bridge-stp` script when called as
# `mstpctl_restart_config` or `mstp_restart` or
# `/sbin/bridge-stp restart_config` or `/sbin/bridge-stp restart` to
# automatically reconfigure bridges.
#
# This may also be used to configure mstpd on systems without ifupdown (on
# systems that are not based on Debian or Ubuntu).

. $IPKG_INSTROOT/lib/functions.sh
. $IPKG_INSTROOT/lib/functions/network.sh

# Parse arguments.
if [ $# -ne 1 ]; then
    echo "Usage: $0 <bridge>" >&2
    exit 1
fi
Bridge="$1"

# Make sure this script is being run as root.
if [ "$(id -u)" != '0' ]; then
    echo 'This script must be run as root' >&2
    exit 1
fi

# Ensure that we have a sane umask.
umask 022

# Ensure that we have a sane PATH.
PATH='/sbin:/usr/sbin:/bin:/usr/bin'
export PATH

# The mstp ifupdown.sh script will not work properly unless mstpctl, brctl, and
# ip exist and are executable.
mstpctl='/sbin/mstpctl'
if [ ! -x "$mstpctl" ]; then
  echo "'mstpctl' binary does not exist or is not executable" >&2
  exit 2
fi
brctl="$(which brctl)"
if [ -z "$brctl" ] || [ ! -x "$brctl" ]; then
  echo "'brctl' binary does not exist or is not executable" >&2
  exit 2
fi

configure_port()
{
	BridgeCfgName="$1"
	BridgeIface="$2"
	BridgePort="$3"

	config_get mstpctl_portpathcost  "$BridgeCfgName" "port_${BridgePort}_pathcost"
	config_get mstpctl_portadminedge "$BridgeCfgName" "port_${BridgePort}_adminedge"
	config_get mstpctl_portautoedge  "$BridgeCfgName" "port_${BridgePort}_autoedge"
	config_get mstpctl_portp2p       "$BridgeCfgName" "port_${BridgePort}_p2p"
	config_get mstpctl_portbpduguard "$BridgeCfgName" "port_${BridgePort}_bpduguard"
	config_get mstpctl_portrestrrole "$BridgeCfgName" "port_${BridgePort}_restrrole"
	config_get mstpctl_portrestrtcn  "$BridgeCfgName" "port_${BridgePort}_restrtcn"
	config_get mstpctl_portnetwork   "$BridgeCfgName" "port_${BridgePort}_network"
	config_get mstpctl_porttreeprio  "$BridgeCfgName" "port_${BridgePort}_treeprio"
	config_get mstpctl_porttreecost  "$BridgeCfgName" "port_${BridgePort}_treecost"

	if [ "$mstpctl_portpathcost" ]; then
		"$mstpctl" setportpathcost "$BridgeIface" "$BridgePort" "$mstpctl_portpathcost"
	fi

	if [ "$mstpctl_portadminedge" ]; then
		"$mstpctl" setportadminedge "$BridgeIface" "$BridgePort" "$mstpctl_portadminedge"
	fi

	if [ "$mstpctl_portautoedge" ]; then
		"$mstpctl" setportautoedge "$BridgeIface" "$BridgePort" "$mstpctl_portautoedge"
	fi

	if [ "$mstpctl_portp2p" ]; then
		"$mstpctl" setportp2p "$BridgeIface" "$BridgePort" "$mstpctl_portp2p"
	fi

	if [ "$mstpctl_portbpduguard" ]; then
		"$mstpctl" setbpduguard "$BridgeIface" "$BridgePort" "$mstpctl_portbpduguard"
	fi

	if [ "$mstpctl_portrestrrole" ]; then
		"$mstpctl" setportrestrrole "$BridgeIface" "$BridgePort" "$mstpctl_portrestrrole"
	fi

	if [ "$mstpctl_portrestrtcn" ]; then
		"$mstpctl" setportrestrtcn "$BridgeIface" "$BridgePort" "$mstpctl_portrestrtcn"
	fi

	if [ "$mstpctl_portnetwork" ]; then
		"$mstpctl" setportnetwork "$BridgeIface" "$BridgePort" "$mstpctl_portnetwork"
	fi

	if [ "$mstpctl_porttreeprio" ]; then
		"$mstpctl" settreeportprio "$BridgeIface" "$BridgePort" 0 "$mstpctl_porttreeprio"
	fi

	if [ "$mstpctl_porttreecost" ]; then
		"$mstpctl" settreeportcost "$BridgeIface" "$BridgePort" 0 "$mstpctl_porttreecost"
	fi

	if [ "$mstpctl_portpathcost" ]; then
		"$mstpctl" setportpathcost "$BridgeIface" "$BridgePort" "$mstpctl_portpathcost"
	fi
}

configure_bridge()
{
	BridgeIface="br-$1"

	if [ "$Bridge" != "$BridgeIface" ]; then
		return
	fi

	config_get if_stp   "$1" 'stp'
	config_get if_type  "$1" 'type'

	if [ "$if_type" != "bridge" ]; then
		return
	fi

	if [ "$if_stp" != "1" ] && [ "$if_stp" != "on" ]; then
		return
	fi

	bridge_ports=`ls /sys/class/net/$BridgeIface/brif/`

	config_load 'mstpd'
	config_get mstpctl_stp "$1" 'stp' 'off'

	if [ "$mstpctl_stp" != 'on' ]; then
		exit 0
	fi

	config_get mstpctl_forcevers   "$1" 'forcevers'
	config_get mstpctl_maxwait     "$1" 'maxwait'
	config_get mstpctl_ageing      "$1" 'ageing'
	config_get mstpctl_maxage      "$1" 'maxage'
	config_get mstpctl_treeprio    "$1" 'treeprio'
	config_get mstpctl_fdelay      "$1" 'fdelay'
	config_get mstpctl_maxhops     "$1" 'maxhops'
	config_get mstpctl_txholdcount "$1" 'txholdcount'
	config_get mstpctl_hello       "$1" 'hello'

	"$mstpctl" addbridge "$BridgeIface"

	current_fdelay=`"$mstpctl" showbridge "$BridgeIface" bridge-forward-delay`
	current_maxage=`"$mstpctl" showbridge "$BridgeIface" bridge-max-age`

	if ! [ "$mstpctl_maxage" ]; then
		mstpctl_maxage=$current_maxage
	fi

	if ! [ "$mstpctl_fdelay" ]; then
		mstpctl_fdelay=$current_fdelay
	fi

	new=$((2 * ($mstpctl_fdelay - 1)))

	if [ "$new" -ge "$current_maxage" ]; then
		# (2 * (new_forward_delay - 1)) >= current_maxage
		"$mstpctl" setfdelay "$BridgeIface" "$mstpctl_fdelay"
		"$mstpctl" setmaxage "$BridgeIface" "$mstpctl_maxage"
	else
		# (2 * (new_forward_delay - 1)) < current_maxage
		"$mstpctl" setmaxage "$BridgeIface" "$mstpctl_maxage"
		"$mstpctl" setfdelay "$BridgeIface" "$mstpctl_fdelay"
	fi

	if [ "$mstpctl_maxhops" ]; then
		"$mstpctl" setmaxhops "$BridgeIface" "$mstpctl_maxhops"
	fi

	if [ "$mstpctl_txholdcount" ]; then
		"$mstpctl" settxholdcount "$BridgeIface" "$mstpctl_txholdcount"
	fi

	if [ "$mstpctl_forcevers" ]; then
		"$mstpctl" setforcevers "$BridgeIface" "$mstpctl_forcevers"
	fi

	if [ "$mstpctl_treeprio" ]; then
		"$mstpctl" settreeprio "$BridgeIface" 0 "$mstpctl_treeprio"
	fi

	if [ "$mstpctl_hello" ]; then
		"$mstpctl" sethello "$BridgeIface" "$mstpctl_hello"
	fi

	if [ "$mstpctl_ageing" ]; then
		"$mstpctl" setageing "$BridgeIface" "$mstpctl_ageing"
	fi

	# Configure ports
	for port in $bridge_ports; do
		configure_port "$1" "$BridgeIface" "$port"
	done

	exit 0
}

configure()
{
	# Read the config.
	config_load 'network'
	config_foreach configure_bridge 'interface'
}

configure
exit 0
